"""
Trevor Smith, 2-16-20
ASTR400B Homework 5

This script will define an importable class MassProfile.

Collaborated with Michael Klein and James Taylor.
"""
import numpy as np
import astropy.units as u
import matplotlib.pyplot as plt

# import our functions from previous homeworks
from ReadFile import Read
from CenterOfMass import CenterOfMass

# import constants
from astropy.constants import G

class MassProfile:
    def __init__(self, galaxy, snap):
        """
        Inputs:
            galaxy = string containing abbreviated galaxy name
            examples are MW, M31,M33
            snap = snap number defining the timestep
        """
        # reconstruct data filename from args
        # add a string of the filenumber to the value "000"
        snapstring = '000' + str(snap)
        # remove all but the last 3 digits
        snapstring = snapstring[-3:]
        self.filename = "%s_"%(galaxy) + snapstring + ".txt"

        # read in data
        time, total, data = Read(self.filename)
        # save and give x, y, z appropriate units
        self.x = data['x']*u.kpc
        self.y = data['y']*u.kpc
        self.z = data['z']*u.kpc

        # save mass (in 1e10 Msun, but no astropy units)
        self.m = data['m']

        # save particle types
        self.type = data['type']

        # save galaxy name
        self.gname = galaxy

    def MassEnclosed(self, ptype, r):
        """
        Calculates the total mass of a specific particle type within given
        radii from the galactic COM.

        Inputs:
            ptype = particle type we are considering
            r = array of radii to calculate enclosed mass (kpc)
        Outputs:
            array of masses (u.Msun)
        """

        # create CenterOfMass object
        COM = CenterOfMass(self.filename, ptype)

        # get COM position
        delta = 0.1
        COMX, COMY, COMZ = COM.COM_P(delta)

        # get particle positions in COM frame of reference
        xNew = self.x - COMX
        yNew = self.y - COMY
        zNew = self.z - COMZ

        # select only particles of ptype
        ind = np.where(self.type == ptype)
        xNew2 = xNew[ind]
        yNew2 = yNew[ind]
        zNew2 = zNew[ind]

        # Calculate magnitudes
        R = (xNew2**2+yNew2**2+zNew2**2)**(0.5)

        # create array to store answers
        encmass = np.zeros(len(r))

        # loop through r to do the calculations
        for i in range(len(r)):
            # find indices of particles within this radius
            index = np.where(R.value < r[i])

            # add their masses and store in our array
            encmass[i] = np.sum(self.m[index])

        # return masses with proper units
        return encmass*1e10*u.Msun

    def MassEnclosedTotal(self,r):
        """
        Calculates the total mass enclosed (regardless of particle type) within
        given radii of the galactic COM

        Inputs:
            r = array of radii to calculate total enclosed mass
        Outputs:
            array of masses corresponding to the radii in r
        """

        # get enclosed masses at r for all particle types
        DiskMass = self.MassEnclosed(2,r)
        DarkMass = self.MassEnclosed(1,r)
        # M33 does not have any bulge stars, check for this case
        if self.gname == 'M33':
            BulgeMass = np.zeros(len(r))
        else:
            BulgeMass = self.MassEnclosed(3,r)

        # return the sum of these at each r
        return DarkMass+DiskMass+BulgeMass

    def HernquistMass(self,r,a,Mhalo):
        """
        This function will compute the mass enclosed within a given radius
        according to the theoretical Hernquist mass profile.

        Inputs:
            r = radius to calculate enclosed mass within
            a = scale factor for Hernquist profile
            Mhalo = dark matter halo mass, total in units of Msun
        Outputs:
            calculated enclosed mass
        """
        return Mhalo*r**2/(a+r)**2

    def CircularVelocity(self,ptype,r):
        """
        Assuming spherical symmetry, this function calculates the circular speed
        due to a specific type of particle at a given radius.
        Inputs:
            ptype = particle type to consider
            r = array with radii to calculate velocities at
        Outputs:
            array of circular speeds (km/s) corresponding to the radii in r
        """
        # define G in proper units for this calculation
        G = G.to(u.kpc*u.km**2/u.s**2/u.Msun)

        # plug into equation, answer should be in km/s
        return np.around(np.sqrt(G*self.MassEnclosed(ptype,r)/r),2)

    def TotalCircularVelocity(self,ptype,r):
        """
        Assuming spherical symmetry, this function calculates the circular speed
        of particles at a given radius.
        Inputs:
            r = array with radii to calculate velocities at
        Outputs:
            array of circular speeds (km/s) corresponding to the radii in r
        """
        # define G in proper units for this calculation
        G = G.to(u.kpc*u.km**2/u.s**2/u.Msun)

        # plug into equation, answer should be in km/s
        return np.around(np.sqrt(G*self.TotalMassEnclosed(r)/r),2)

    def HernquistVCirc(self,r,a,Mhalo):
        """
        Assuming spherical symmetry, calculates the circular speed at a given
        radius. This function assumes a Hernquist mass profile.
        Inputs:
            r = array of radii in kpc
            a = scale factor for Hernquist profile
            Mhalo = mass of dark matter halo
        Outputs:
            array of velocities in km/s
        """
        # define G in useful units
        G = G.to(u.kpc*u.km**2/u.s**2/u.Msun)

        # plug into equation, round to 2 decimal places
        # answer should be
        return np.around(np.sqrt(G*self.HernquistM(r,a,Mhalo)/r),2)

"""
Homework 5 Part 8:
Plot the mass profile for each component of the MW up to a radius of 30 kpc.
"""
# define the range of radii on the x-axis
r = np.arange(0.1,500,3)

# initialize plot
fig, ax = plt.subplots(nrows=1,ncols=1,figsize=(7,7))

# get data for each curve using class
MWProfile = MassProfile('MW',0)
halo_mass = MWProfile.MassEnclosed(1,r)
disk_mass = MWProfile.MassEnclosed(2,r)
bulge_mass = MWProfile.MassEnclosed(3,r)

# plot curves on same plot
ax.plot(r,halo_mass,color='k',linestyle='solid',label='Dark Matter')
ax.plot(r,disk_mass,color='b',linestyle='dashdot',label='Disk Stars')
ax.plot(r,bulge_mass,color='r',linestyle='dotted',label='Bulge Stars')

# set title, axis labels, and scale
ax.set(title='MW Mass Profile',xlabel='Radius (kpc)',
       ylabel='Mass Enclosed (Msun)',yscale='log')

# show legend
ax.legend()

# show plot
plt.show()
#plt.save_fig('MWMassComponents.pdf')
